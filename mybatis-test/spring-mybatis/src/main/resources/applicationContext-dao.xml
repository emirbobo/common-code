<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
						  http://www.springframework.org/schema/beans/spring-beans-4.1.xsd">

    <bean id="abstractDataSource" abstract="true" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close" lazy-init="false">
        <property name="initialSize" value="15" />
        <property name="minIdle" value="15" />
        <property name="maxActive" value="50" />
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000" />
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="30000" />
        <property name="validationQuery" value="SELECT 'x'" />
        <property name="testWhileIdle" value="true" />
        <!--<property name="testOnBorrow" value="false" />-->
        <property name="testOnBorrow" value="true" />
        <property name="testOnReturn" value="false" />
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="false" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="0" />
        <property name="filters" value="stat,config" />
    </bean>

    <!--<bean id="writeDataSource" parent="abstractDataSource">-->
        <!--<property name="connectProperties">-->
            <!--<props>-->
                <!--<prop key="config.file">${mysql.biz.master.config}</prop>-->
                <!--<prop key="config.decrypt">true</prop>-->
            <!--</props>-->
        <!--</property>-->
    <!--</bean>-->

    <!--<bean id="readDataSource" parent="abstractDataSource">-->
        <!--<property name="connectProperties">-->
            <!--<props>-->
                <!--<prop key="config.file">${mysql.biz.slave1.config}</prop>-->
                <!--<prop key="config.decrypt">true</prop>-->
            <!--</props>-->
        <!--</property>-->
    <!--</bean>-->

    <bean id="writeDataSource" parent="abstractDataSource">
        <property name="driverClassName">
            <value>org.gjt.mm.mysql.Driver</value>
        </property>
        <property name="url">
            <value>jdbc:mysql://localhost:3306/mybatis-1?useUnicode=true&amp;characterEncoding=UTF-8</value>
        </property>
        <property name="username">
            <value>root</value>
        </property>
        <property name="password">
            <value></value>
        </property>
    </bean>
    <!--<bean id="readDataSource" parent="abstractDataSource">-->
        <!--<property name="driverClassName">-->
            <!--<value>org.gjt.mm.mysql.Driver</value>-->
        <!--</property>-->
        <!--<property name="url">-->
            <!--<value>jdbc:mysql://localhost:3306/mybatis-1?useUnicode=true&amp;characterEncoding=UTF-8</value>-->
        <!--</property>-->
        <!--<property name="username">-->
            <!--<value>root</value>-->
        <!--</property>-->
        <!--<property name="password">-->
            <!--<value></value>-->
        <!--</property>-->
    <!--</bean>-->
    <!--<bean id="dataSource"-->
          <!--class="com.emirbobo.mybatis.ReadWriteSplittingMybatisDataSourceProxy">-->
        <!--<property name="writeDataSource" ref="writeDataSource" />-->
        <!--<property name="readDataSources">-->
            <!--<list>-->
                <!--<ref bean="readDataSource" />-->
            <!--</list>-->
        <!--</property>-->
        <!--<property name="loadBalancer">-->
            <!--<bean class="com.emirbobo.mybatis.RoundRobinLoadBalancer" />-->
        <!--</property>-->
        <!--<property name="shardingTable" ref="systemShardingTable"/>-->
    <!--</bean>-->

    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="writeDataSource" />
        <property name="configLocation" value="classpath:mybatis-config.xml" />
        <property name="mapperLocations">
            <list>
                <value>classpath:com/emirbobo/web/dao/*.xml</value>
            </list>
        </property>
    </bean>
    <bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
        <property name="basePackage" value="com.emirbobo.web.dao" />
    </bean>
</beans>